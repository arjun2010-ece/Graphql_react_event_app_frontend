{"ast":null,"code":"var _jsxFileName = \"/home/arjun/code/react/graphql-react-event-booking/frontend/src/pages/Events.js\";\nimport React, { Component } from 'react';\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport AuthContext from '../context/auth-context';\nimport './Events.css';\n\nclass EventsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      events: []\n    };\n\n    this.startCreateEventHandler = () => {\n      this.setState({\n        creating: true\n      });\n    };\n\n    this.modalConfirmHandler = () => {\n      this.setState({\n        creating: false\n      });\n      const title = this.titleElRef.current.value;\n      const price = +this.priceElRef.current.value;\n      const date = this.dateElRef.current.value;\n      const description = this.descriptionElRef.current.value;\n\n      if (title.trim().length === 0 || price <= 0 || date.trim().length === 0 || description.trim().length === 0) {\n        return;\n      }\n\n      const event = {\n        title,\n        price,\n        date,\n        description\n      };\n      console.log(event);\n      const requestBody = {\n        query: \"\\n          mutation {\\n            createEvent(eventInput: {title: \\\"\".concat(title, \"\\\", description: \\\"\").concat(description, \"\\\", price: \").concat(price, \", date: \\\"\").concat(date, \"\\\"}) {\\n              _id\\n              title\\n              description\\n              date\\n              price\\n              creator {\\n                _id\\n                email\\n              }\\n            }\\n          }\\n        \")\n      };\n      const token = this.context.token;\n      fetch('http://localhost:8000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        this.fetchEvents();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false\n      });\n    };\n\n    this.titleElRef = React.createRef();\n    this.priceElRef = React.createRef();\n    this.dateElRef = React.createRef();\n    this.descriptionElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchEvents();\n  }\n\n  fetchEvents() {\n    const requestBody = {\n      query: \"\\n          query {\\n            events {\\n              _id\\n              title\\n              description\\n              date\\n              price\\n              creator {\\n                _id\\n                email\\n              }\\n            }\\n          }\\n        \"\n    };\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const events = resData.data.events;\n      this.setState({\n        events: events\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    const eventList = this.state.events.map(event => {\n      return React.createElement(\"li\", {\n        key: event._id,\n        className: \"events__list-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \" \", event.title, \" \");\n    });\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \" \", this.state.creating && React.createElement(Backdrop, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), \" \", this.state.creating && React.createElement(Modal, {\n      title: \"Add Event\",\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \" Title \"), \" \", React.createElement(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      ref: this.titleElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), \" \"), \" \", React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"price\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \" Price \"), \" \", React.createElement(\"input\", {\n      type: \"number\",\n      id: \"price\",\n      ref: this.priceElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), \" \"), \" \", React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \" Date \"), \" \", React.createElement(\"input\", {\n      type: \"datetime-local\",\n      id: \"date\",\n      ref: this.dateElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), \" \"), \" \", React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \" Description \"), \" \", React.createElement(\"textarea\", {\n      id: \"description\",\n      rows: \"4\",\n      ref: this.descriptionElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), \" \"), \" \"), \" \"), \" \", this.context.token && React.createElement(\"div\", {\n      className: \"events-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \" Share your own Events! \"), \" \", React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.startCreateEventHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"Create Event \"), \" \"), \" \", React.createElement(\"ul\", {\n      className: \"events__list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \" \", eventList, \" \"), \" \");\n  }\n\n}\n\nEventsPage.contextType = AuthContext;\nexport default EventsPage;","map":{"version":3,"sources":["/home/arjun/code/react/graphql-react-event-booking/frontend/src/pages/Events.js"],"names":["React","Component","Modal","Backdrop","AuthContext","EventsPage","constructor","props","state","creating","events","startCreateEventHandler","setState","modalConfirmHandler","title","titleElRef","current","value","price","priceElRef","date","dateElRef","description","descriptionElRef","trim","length","event","console","log","requestBody","query","token","context","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","fetchEvents","catch","err","modalCancelHandler","createRef","componentDidMount","data","render","eventList","map","_id","contextType"],"mappings":"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","sourcesContent":["import React, {\n  Component\n} from 'react';\n\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport AuthContext from '../context/auth-context';\nimport './Events.css';\n\nclass EventsPage extends Component {\n  state = {\n    creating: false,\n    events: []\n  };\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.titleElRef = React.createRef();\n    this.priceElRef = React.createRef();\n    this.dateElRef = React.createRef();\n    this.descriptionElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchEvents();\n  }\n\n  startCreateEventHandler = () => {\n    this.setState({\n      creating: true\n    });\n  };\n\n  modalConfirmHandler = () => {\n    this.setState({\n      creating: false\n    });\n    const title = this.titleElRef.current.value;\n    const price = +this.priceElRef.current.value;\n    const date = this.dateElRef.current.value;\n    const description = this.descriptionElRef.current.value;\n\n    if (\n      title.trim().length === 0 ||\n      price <= 0 ||\n      date.trim().length === 0 ||\n      description.trim().length === 0\n    ) {\n      return;\n    }\n\n    const event = {\n      title,\n      price,\n      date,\n      description\n    };\n    console.log(event);\n\n    const requestBody = {\n      query: `\n          mutation {\n            createEvent(eventInput: {title: \"${title}\", description: \"${description}\", price: ${price}, date: \"${date}\"}) {\n              _id\n              title\n              description\n              date\n              price\n              creator {\n                _id\n                email\n              }\n            }\n          }\n        `\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:8000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.fetchEvents();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({\n      creating: false\n    });\n  };\n\n  fetchEvents() {\n    const requestBody = {\n      query: `\n          query {\n            events {\n              _id\n              title\n              description\n              date\n              price\n              creator {\n                _id\n                email\n              }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const events = resData.data.events;\n        this.setState({\n          events: events\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  render() {\n    const eventList = this.state.events.map(event => {\n      return ( <\n        li key = {\n          event._id\n        }\n        className = \"events__list-item\" > {\n          event.title\n        } <\n        /li>\n      );\n    });\n\n    return ( <\n      React.Fragment > {\n        this.state.creating && < Backdrop / >\n      } {\n        this.state.creating && ( <\n          Modal title = \"Add Event\"\n          canCancel canConfirm onCancel = {\n            this.modalCancelHandler\n          }\n          onConfirm = {\n            this.modalConfirmHandler\n          } >\n          <\n          form >\n          <\n          div className = \"form-control\" >\n          <\n          label htmlFor = \"title\" > Title < /label> <\n          input type = \"text\"\n          id = \"title\"\n          ref = {\n            this.titleElRef\n          }\n          /> <\n          /div> <\n          div className = \"form-control\" >\n          <\n          label htmlFor = \"price\" > Price < /label> <\n          input type = \"number\"\n          id = \"price\"\n          ref = {\n            this.priceElRef\n          }\n          /> <\n          /div> <\n          div className = \"form-control\" >\n          <\n          label htmlFor = \"date\" > Date < /label> <\n          input type = \"datetime-local\"\n          id = \"date\"\n          ref = {\n            this.dateElRef\n          }\n          /> <\n          /div> <\n          div className = \"form-control\" >\n          <\n          label htmlFor = \"description\" > Description < /label> <\n          textarea id = \"description\"\n          rows = \"4\"\n          ref = {\n            this.descriptionElRef\n          }\n          /> <\n          /div> <\n          /form> <\n          /Modal>\n        )\n      } {\n        this.context.token && ( <\n          div className = \"events-control\" >\n          <\n          p > Share your own Events! < /p> <\n          button className = \"btn\"\n          onClick = {\n            this.startCreateEventHandler\n          } >\n          Create Event <\n          /button> <\n          /div>\n        )\n      } <\n      ul className = \"events__list\" > {\n        eventList\n      } < /ul> <\n      /React.Fragment>\n    );\n  }\n}\n\nexport default EventsPage;"]},"metadata":{},"sourceType":"module"}